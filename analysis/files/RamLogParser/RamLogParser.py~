#! /usr/bin/env python
# Parses a line of a ramses log file  (i.e. the screen text dump)
#    and puts the results into an array

import numpy as np

class RamLogParser(object):
    '''
    Parses a line of a Ramses log file
    '''

    def __init__(self):
        self._table = np.empty([5,100000],dtype=float)
        self.currline = 0

    # Parse a RAMSES log file
    def ParseFile(self, filename):
        infile = open(filename)
        filetxt = infile.read()
        infile.close()
        for line in filetxt.split('\n') :
            self.ParseLine(line)
    return
        

    # Import a line of text and parse it
    # FORMAT: 
    # Fine step=  1361 t= 5.39164E-03 dt= 3.988E-06 a= 1.000E+00 mem= 2.2%
    def ParseLine(self, line):
        spl = line.split(" ")
        # DEBUG
        #i = 0
        #for its in spl:
        #    print its, i
        #    i += 1
        # Check for valid line (VERY dodgy diagnostic...)
        if spl[1] == "Fine" and spl[2] == "step=":
            # Pick numbers (TODO: More robust selection!)
            fineStep = spl[4]
            time = spl[6]
            dt = spl[8]
            scale = spl[10]
            mempc = spl[11]
            # We need to parse mem specially, e.g. mem=11.6% -> 11.6
            # (there's no space after the = and strip the % sign)
            mempc = mempc[4:len(mempc)-1]
            print fineStep, time, dt, scale, mempc
            self._table[0,currline] = fineStep
            self._table[1,currline] = time
            self._table[2,currline] = dt
            self._table[3,currline] = scale
            self._table[4,currline] = mempc
            # Increment the current line number
            currline++
        return

    # Output to ascii file
    def Output(self, filename):
        # Open file
        outfile = open(filename,'w')
        # Print table headers
        print >> outfile, "Fine_step Time dt scale_factor Memory%"
        # Loop through lines
        for i in range(0,currline+1):
            print >> outfile, \
                self._table[0,i], \
                self._table[1,i], \
                self._table[2,i], \
                self._table[3,i], \
                self._table[4,i], \
        # CLOSE FILE. CLOSE IT CLOSEAAAAARGH-
        outfile.close()
        # -There. It's done.
        return
